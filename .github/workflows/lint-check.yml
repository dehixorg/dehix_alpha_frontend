name: Lint Check

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run lint and check for warnings/errors
        id: lint-check
        run: |
          # Create a temporary file for lint output
          LINT_OUTPUT_FILE=$(mktemp)
          LINT_SUMMARY_FILE=$(mktemp)

          # Run lint and save output to file
          # Use --no-error-on-unmatched-pattern to prevent errors when no files match
          npx eslint . --ext .ts,.tsx --format=json > "$LINT_OUTPUT_FILE" 2>/dev/null || true

          # Initialize counters
          TOTAL_ERRORS=0
          TOTAL_WARNINGS=0

          # Process the lint output
          if [ -s "$LINT_OUTPUT_FILE" ]; then
            # Clean the JSON output to remove control characters
            sed -i -e 's/[[:cntrl:]]//g' "$LINT_OUTPUT_FILE"
            
            # Process the JSON output
            if jq -e . "$LINT_OUTPUT_FILE" >/dev/null 2>&1; then
              # Check if the output is an array
              if jq -e 'if type=="array" then true else false end' "$LINT_OUTPUT_FILE" | grep -q true; then
                # Process array of files
                jq -r '.[] | "\(.filePath):\(.errorCount):\(.warningCount)"' "$LINT_OUTPUT_FILE" > "$LINT_SUMMARY_FILE"
                
                # Sum up errors and warnings
                while IFS=: read -r file errorCount warningCount; do
                  TOTAL_ERRORS=$((TOTAL_ERRORS + errorCount))
                  TOTAL_WARNINGS=$((TOTAL_WARNINGS + warningCount))
                  
                  # Output individual file issues if they have any
                  if [ "$errorCount" -gt 0 ] || [ "$warningCount" -gt 0 ]; then
                    echo "$file: $errorCount errors, $warningCount warnings"
                  fi
                done < "$LINT_SUMMARY_FILE"
              else
                # Process single file result
                errorCount=$(jq -r '.errorCount // 0' "$LINT_OUTPUT_FILE" 2>/dev/null || echo 0)
                warningCount=$(jq -r '.warningCount // 0' "$LINT_OUTPUT_FILE" 2>/dev/null || echo 0)
                filePath=$(jq -r '.filePath // "unknown"' "$LINT_OUTPUT_FILE" 2>/dev/null || echo "unknown")
                
                TOTAL_ERRORS=$((TOTAL_ERRORS + errorCount))
                TOTAL_WARNINGS=$((TOTAL_WARNINGS + warningCount))
                
                if [ "$errorCount" -gt 0 ] || [ "$warningCount" -gt 0 ]; then
                  echo "$filePath: $errorCount errors, $warningCount warnings"
                fi
              fi
            else
              echo "Warning: Failed to parse lint output as JSON"
              echo "Raw output for debugging:"
              cat "$LINT_OUTPUT_FILE"
            fi
          fi

          # Print summary
          echo "\nLint Summary:"
          echo "============"
          echo "Total files checked: $(find src -type f -name '*.ts' -o -name '*.tsx' | wc -l)"
          echo "Total errors: $TOTAL_ERRORS"
          echo "Total warnings: $TOTAL_WARNINGS"

          # Set outputs for the job
          echo "total_errors=$TOTAL_ERRORS" >> $GITHUB_OUTPUT
          echo "total_warnings=$TOTAL_WARNINGS" >> $GITHUB_OUTPUT

          # Fail the step if there are any errors or more than 5 warnings
          
          if [ "$TOTAL_ERRORS" -gt 0 ]; then
            echo "::error::Lint check failed with $TOTAL_ERRORS error(s) and $TOTAL_WARNINGS warning(s)"
            exit 1
          elif [ "$TOTAL_WARNINGS" -gt 5 ]; then
            echo "::error::Too many warnings: $TOTAL_WARNINGS (maximum allowed is 5)"
            exit 1
          elif [ "$TOTAL_WARNINGS" -gt 0 ]; then
            echo "::warning::Lint check passed with $TOTAL_WARNINGS warning(s) (5 allowed)"
          else
            echo "âœ… Lint check passed with no errors or warnings"
          fi
          
          # Cleanup
          rm -f "$LINT_OUTPUT_FILE" "$LINT_SUMMARY_FILE"
